
speed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000096c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  000009e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f32  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000954  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064b  00000000  00000000  00002356  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000029a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cc  00000000  00000000  00002fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000038a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 32       	cpi	r26, 0x20	; 32
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
  88:	0c 94 b4 04 	jmp	0x968	; 0x968 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <count>:

//count the number of digits in a number
unsigned int count(unsigned int i)
{
	unsigned int ret=1;
	while (i/=10) ret++;
  90:	9c 01       	movw	r18, r24
  92:	ad ec       	ldi	r26, 0xCD	; 205
  94:	bc ec       	ldi	r27, 0xCC	; 204
  96:	0e 94 86 04 	call	0x90c	; 0x90c <__umulhisi3>
  9a:	9c 01       	movw	r18, r24
  9c:	36 95       	lsr	r19
  9e:	27 95       	ror	r18
  a0:	36 95       	lsr	r19
  a2:	27 95       	ror	r18
  a4:	36 95       	lsr	r19
  a6:	27 95       	ror	r18
  a8:	21 15       	cp	r18, r1
  aa:	31 05       	cpc	r19, r1
  ac:	99 f0       	breq	.+38     	; 0xd4 <count+0x44>
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	ad ec       	ldi	r26, 0xCD	; 205
  b8:	bc ec       	ldi	r27, 0xCC	; 204
  ba:	0e 94 86 04 	call	0x90c	; 0x90c <__umulhisi3>
  be:	9c 01       	movw	r18, r24
  c0:	36 95       	lsr	r19
  c2:	27 95       	ror	r18
  c4:	36 95       	lsr	r19
  c6:	27 95       	ror	r18
  c8:	36 95       	lsr	r19
  ca:	27 95       	ror	r18
  cc:	21 15       	cp	r18, r1
  ce:	31 05       	cpc	r19, r1
  d0:	81 f7       	brne	.-32     	; 0xb2 <count+0x22>
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <count+0x48>
}

//count the number of digits in a number
unsigned int count(unsigned int i)
{
	unsigned int ret=1;
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
	while (i/=10) ret++;
	return ret;
}
  d8:	ca 01       	movw	r24, r20
  da:	08 95       	ret

000000dc <setDisplay>:

//turns on the desired 7seg (either 1,2, or 3) and displays the desired number (0-9)
void setDisplay(int displayNum, int number)
{
	//turn on correct control
	if(displayNum == 1)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 05       	cpc	r25, r1
  e0:	19 f4       	brne	.+6      	; 0xe8 <setDisplay+0xc>
		PORTD = 0x01;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	0a c0       	rjmp	.+20     	; 0xfc <setDisplay+0x20>
	else if (displayNum == 2)
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	91 05       	cpc	r25, r1
  ec:	19 f4       	brne	.+6      	; 0xf4 <setDisplay+0x18>
		PORTD = 0x02;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	04 c0       	rjmp	.+8      	; 0xfc <setDisplay+0x20>
	else if (displayNum == 3)
  f4:	03 97       	sbiw	r24, 0x03	; 3
  f6:	11 f4       	brne	.+4      	; 0xfc <setDisplay+0x20>
		PORTD = 0x04;
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	8b b9       	out	0x0b, r24	; 11
	
	//turn on correct LEDs
	if(number == 0)
  fc:	61 15       	cp	r22, r1
  fe:	71 05       	cpc	r23, r1
 100:	19 f4       	brne	.+6      	; 0x108 <setDisplay+0x2c>
		PORTB = 0xC0;
 102:	80 ec       	ldi	r24, 0xC0	; 192
 104:	85 b9       	out	0x05, r24	; 5
 106:	08 95       	ret
	else if(number == 1)
 108:	61 30       	cpi	r22, 0x01	; 1
 10a:	71 05       	cpc	r23, r1
 10c:	19 f4       	brne	.+6      	; 0x114 <setDisplay+0x38>
		PORTB = 0xF9;
 10e:	89 ef       	ldi	r24, 0xF9	; 249
 110:	85 b9       	out	0x05, r24	; 5
 112:	08 95       	ret
	else if(number == 2)
 114:	62 30       	cpi	r22, 0x02	; 2
 116:	71 05       	cpc	r23, r1
 118:	19 f4       	brne	.+6      	; 0x120 <setDisplay+0x44>
		PORTB = 0xA4;
 11a:	84 ea       	ldi	r24, 0xA4	; 164
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	08 95       	ret
	else if(number == 3)
 120:	63 30       	cpi	r22, 0x03	; 3
 122:	71 05       	cpc	r23, r1
 124:	19 f4       	brne	.+6      	; 0x12c <setDisplay+0x50>
		PORTB = 0xB0;
 126:	80 eb       	ldi	r24, 0xB0	; 176
 128:	85 b9       	out	0x05, r24	; 5
 12a:	08 95       	ret
	else if(number == 4)
 12c:	64 30       	cpi	r22, 0x04	; 4
 12e:	71 05       	cpc	r23, r1
 130:	19 f4       	brne	.+6      	; 0x138 <setDisplay+0x5c>
		PORTB = 0x99;
 132:	89 e9       	ldi	r24, 0x99	; 153
 134:	85 b9       	out	0x05, r24	; 5
 136:	08 95       	ret
	else if(number == 5)
 138:	65 30       	cpi	r22, 0x05	; 5
 13a:	71 05       	cpc	r23, r1
 13c:	19 f4       	brne	.+6      	; 0x144 <setDisplay+0x68>
		PORTB = 0x92;
 13e:	82 e9       	ldi	r24, 0x92	; 146
 140:	85 b9       	out	0x05, r24	; 5
 142:	08 95       	ret
	else if(number == 6)
 144:	66 30       	cpi	r22, 0x06	; 6
 146:	71 05       	cpc	r23, r1
 148:	19 f4       	brne	.+6      	; 0x150 <setDisplay+0x74>
		PORTB = 0x82;
 14a:	82 e8       	ldi	r24, 0x82	; 130
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	08 95       	ret
	else if(number == 7)
 150:	67 30       	cpi	r22, 0x07	; 7
 152:	71 05       	cpc	r23, r1
 154:	19 f4       	brne	.+6      	; 0x15c <setDisplay+0x80>
		PORTB = 0xF8;
 156:	88 ef       	ldi	r24, 0xF8	; 248
 158:	85 b9       	out	0x05, r24	; 5
 15a:	08 95       	ret
	else if(number == 8)
 15c:	68 30       	cpi	r22, 0x08	; 8
 15e:	71 05       	cpc	r23, r1
 160:	19 f4       	brne	.+6      	; 0x168 <setDisplay+0x8c>
		PORTB = 0x80;
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	85 b9       	out	0x05, r24	; 5
 166:	08 95       	ret
	else if(number == 9)
 168:	69 30       	cpi	r22, 0x09	; 9
 16a:	71 05       	cpc	r23, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <setDisplay+0x96>
		PORTB = 0x98;
 16e:	88 e9       	ldi	r24, 0x98	; 152
 170:	85 b9       	out	0x05, r24	; 5
 172:	08 95       	ret

00000174 <processThreeDigitNumber>:
	return ret;
}

//takes in a three digit number and develops the data to be sent to the displays
void processThreeDigitNumber(int number)
{
 174:	8f 92       	push	r8
 176:	9f 92       	push	r9
 178:	af 92       	push	r10
 17a:	bf 92       	push	r11
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	d8 2e       	mov	r13, r24
 192:	c9 2e       	mov	r12, r25
		}
	}
	//turn off display
	PORTB = 0x00;
	PORTD = 0x00;
}
 194:	ed b6       	in	r14, 0x3d	; 61
 196:	fe b6       	in	r15, 0x3e	; 62

//takes in a three digit number and develops the data to be sent to the displays
void processThreeDigitNumber(int number)
{
	//break the three digit number into its three digits and place them in an array
	unsigned int dig=count(number);
 198:	0e 94 48 00 	call	0x90	; 0x90 <count>
 19c:	4c 01       	movw	r8, r24
	unsigned int compare = dig;
	char arr[dig];
 19e:	8d b7       	in	r24, 0x3d	; 61
 1a0:	9e b7       	in	r25, 0x3e	; 62
 1a2:	88 19       	sub	r24, r8
 1a4:	99 09       	sbc	r25, r9
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	9e bf       	out	0x3e, r25	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	8d bf       	out	0x3d, r24	; 61
 1b0:	2d b7       	in	r18, 0x3d	; 61
 1b2:	3e b7       	in	r19, 0x3e	; 62
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	89 01       	movw	r16, r18
	while (dig--) 
 1ba:	81 14       	cp	r8, r1
 1bc:	91 04       	cpc	r9, r1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <processThreeDigitNumber+0x4e>
 1c0:	b4 c0       	rjmp	.+360    	; 0x32a <processThreeDigitNumber+0x1b6>
 1c2:	f9 01       	movw	r30, r18
 1c4:	e8 0d       	add	r30, r8
 1c6:	f9 1d       	adc	r31, r9
	{
		arr[dig]=number%10;
 1c8:	0f 2e       	mov	r0, r31
 1ca:	fa e0       	ldi	r31, 0x0A	; 10
 1cc:	af 2e       	mov	r10, r31
 1ce:	b1 2c       	mov	r11, r1
 1d0:	f0 2d       	mov	r31, r0
 1d2:	8d 2d       	mov	r24, r13
 1d4:	9c 2d       	mov	r25, r12
 1d6:	b5 01       	movw	r22, r10
 1d8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divmodhi4>
 1dc:	82 93       	st	-Z, r24
		number/=10;
 1de:	d6 2e       	mov	r13, r22
 1e0:	c7 2e       	mov	r12, r23
{
	//break the three digit number into its three digits and place them in an array
	unsigned int dig=count(number);
	unsigned int compare = dig;
	char arr[dig];
	while (dig--) 
 1e2:	e2 17       	cp	r30, r18
 1e4:	f3 07       	cpc	r31, r19
 1e6:	a9 f7       	brne	.-22     	; 0x1d2 <processThreeDigitNumber+0x5e>
 1e8:	9a c0       	rjmp	.+308    	; 0x31e <processThreeDigitNumber+0x1aa>
		number/=10;
	}
	
	//arr has the following contents: [digit 3, digit 2, digit 1]
	//if there are three digits then we can just send out the array
	if(compare == 3)
 1ea:	0f 2e       	mov	r0, r31
 1ec:	f8 ee       	ldi	r31, 0xE8	; 232
 1ee:	cf 2e       	mov	r12, r31
 1f0:	f3 e0       	ldi	r31, 0x03	; 3
 1f2:	df 2e       	mov	r13, r31
 1f4:	f0 2d       	mov	r31, r0
	{
		//set the displays for a desired period of time
		for(int i = 0; i < DISPLAY_TIME; i++)
		{
			setDisplay(3,arr[0]);
 1f6:	f8 01       	movw	r30, r16
 1f8:	60 81       	ld	r22, Z
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 6e 00 	call	0xdc	; 0xdc <setDisplay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	87 ee       	ldi	r24, 0xE7	; 231
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <processThreeDigitNumber+0x94>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <processThreeDigitNumber+0x9a>
 20e:	00 00       	nop
			_delay_us(SEGMENT_PAUSE);
			setDisplay(2,arr[1]);
 210:	f8 01       	movw	r30, r16
 212:	61 81       	ldd	r22, Z+1	; 0x01
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 6e 00 	call	0xdc	; 0xdc <setDisplay>
 21e:	87 ee       	ldi	r24, 0xE7	; 231
 220:	93 e0       	ldi	r25, 0x03	; 3
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <processThreeDigitNumber+0xae>
 226:	00 c0       	rjmp	.+0      	; 0x228 <processThreeDigitNumber+0xb4>
 228:	00 00       	nop
			_delay_us(SEGMENT_PAUSE);
			setDisplay(1,arr[2]);
 22a:	f8 01       	movw	r30, r16
 22c:	62 81       	ldd	r22, Z+2	; 0x02
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 6e 00 	call	0xdc	; 0xdc <setDisplay>
 238:	87 ee       	ldi	r24, 0xE7	; 231
 23a:	93 e0       	ldi	r25, 0x03	; 3
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <processThreeDigitNumber+0xc8>
 240:	00 c0       	rjmp	.+0      	; 0x242 <processThreeDigitNumber+0xce>
 242:	00 00       	nop
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	c9 1a       	sub	r12, r25
 248:	d1 08       	sbc	r13, r1
	//arr has the following contents: [digit 3, digit 2, digit 1]
	//if there are three digits then we can just send out the array
	if(compare == 3)
	{
		//set the displays for a desired period of time
		for(int i = 0; i < DISPLAY_TIME; i++)
 24a:	a9 f6       	brne	.-86     	; 0x1f6 <processThreeDigitNumber+0x82>
 24c:	6e c0       	rjmp	.+220    	; 0x32a <processThreeDigitNumber+0x1b6>
			setDisplay(1,arr[2]);
			_delay_us(SEGMENT_PAUSE);
		}
	}
	//if there are only two digits just make digit 3 a 0, and use the two digits to construct the number on digits 1 and 2
	else if(compare == 2)
 24e:	e2 e0       	ldi	r30, 0x02	; 2
 250:	8e 16       	cp	r8, r30
 252:	91 04       	cpc	r9, r1
 254:	89 f5       	brne	.+98     	; 0x2b8 <processThreeDigitNumber+0x144>
 256:	0f 2e       	mov	r0, r31
 258:	f8 ee       	ldi	r31, 0xE8	; 232
 25a:	cf 2e       	mov	r12, r31
 25c:	f3 e0       	ldi	r31, 0x03	; 3
 25e:	df 2e       	mov	r13, r31
 260:	f0 2d       	mov	r31, r0
	{
		//set the displays for a desired period of time
		for(int i = 0; i < DISPLAY_TIME; i++)
		{
			setDisplay(3,0);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 6e 00 	call	0xdc	; 0xdc <setDisplay>
 26e:	87 ee       	ldi	r24, 0xE7	; 231
 270:	93 e0       	ldi	r25, 0x03	; 3
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <processThreeDigitNumber+0xfe>
 276:	00 c0       	rjmp	.+0      	; 0x278 <processThreeDigitNumber+0x104>
 278:	00 00       	nop
			_delay_us(SEGMENT_PAUSE);
			setDisplay(2,arr[0]);
 27a:	f8 01       	movw	r30, r16
 27c:	60 81       	ld	r22, Z
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 6e 00 	call	0xdc	; 0xdc <setDisplay>
 288:	87 ee       	ldi	r24, 0xE7	; 231
 28a:	93 e0       	ldi	r25, 0x03	; 3
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <processThreeDigitNumber+0x118>
 290:	00 c0       	rjmp	.+0      	; 0x292 <processThreeDigitNumber+0x11e>
 292:	00 00       	nop
			_delay_us(SEGMENT_PAUSE);
			setDisplay(1,arr[1]);
 294:	f8 01       	movw	r30, r16
 296:	61 81       	ldd	r22, Z+1	; 0x01
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 6e 00 	call	0xdc	; 0xdc <setDisplay>
 2a2:	87 ee       	ldi	r24, 0xE7	; 231
 2a4:	93 e0       	ldi	r25, 0x03	; 3
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <processThreeDigitNumber+0x132>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <processThreeDigitNumber+0x138>
 2ac:	00 00       	nop
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	c9 1a       	sub	r12, r25
 2b2:	d1 08       	sbc	r13, r1
	}
	//if there are only two digits just make digit 3 a 0, and use the two digits to construct the number on digits 1 and 2
	else if(compare == 2)
	{
		//set the displays for a desired period of time
		for(int i = 0; i < DISPLAY_TIME; i++)
 2b4:	b1 f6       	brne	.-84     	; 0x262 <processThreeDigitNumber+0xee>
 2b6:	39 c0       	rjmp	.+114    	; 0x32a <processThreeDigitNumber+0x1b6>
			setDisplay(1,arr[1]);
			_delay_us(SEGMENT_PAUSE);
		}
	}
	//if there is only one digit just make digit 3 and 2 a 0, and use the single digit to construct the number on digit 1
	else if(compare == 1)
 2b8:	8a 94       	dec	r8
 2ba:	89 28       	or	r8, r9
 2bc:	b1 f5       	brne	.+108    	; 0x32a <processThreeDigitNumber+0x1b6>
 2be:	0f 2e       	mov	r0, r31
 2c0:	f8 ee       	ldi	r31, 0xE8	; 232
 2c2:	cf 2e       	mov	r12, r31
 2c4:	f3 e0       	ldi	r31, 0x03	; 3
 2c6:	df 2e       	mov	r13, r31
 2c8:	f0 2d       	mov	r31, r0
	{
		//set the displays for a desired period of time
		for(int i = 0; i < DISPLAY_TIME; i++)
		{
			setDisplay(3,0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 6e 00 	call	0xdc	; 0xdc <setDisplay>
 2d6:	87 ee       	ldi	r24, 0xE7	; 231
 2d8:	93 e0       	ldi	r25, 0x03	; 3
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <processThreeDigitNumber+0x166>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <processThreeDigitNumber+0x16c>
 2e0:	00 00       	nop
			_delay_us(SEGMENT_PAUSE);
			setDisplay(2,0);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 6e 00 	call	0xdc	; 0xdc <setDisplay>
 2ee:	e7 ee       	ldi	r30, 0xE7	; 231
 2f0:	f3 e0       	ldi	r31, 0x03	; 3
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <processThreeDigitNumber+0x17e>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <processThreeDigitNumber+0x184>
 2f8:	00 00       	nop
			_delay_us(SEGMENT_PAUSE);
			setDisplay(1,arr[0]);
 2fa:	f8 01       	movw	r30, r16
 2fc:	60 81       	ld	r22, Z
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 6e 00 	call	0xdc	; 0xdc <setDisplay>
 308:	87 ee       	ldi	r24, 0xE7	; 231
 30a:	93 e0       	ldi	r25, 0x03	; 3
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <processThreeDigitNumber+0x198>
 310:	00 c0       	rjmp	.+0      	; 0x312 <processThreeDigitNumber+0x19e>
 312:	00 00       	nop
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	c9 1a       	sub	r12, r25
 318:	d1 08       	sbc	r13, r1
	}
	//if there is only one digit just make digit 3 and 2 a 0, and use the single digit to construct the number on digit 1
	else if(compare == 1)
	{
		//set the displays for a desired period of time
		for(int i = 0; i < DISPLAY_TIME; i++)
 31a:	b9 f6       	brne	.-82     	; 0x2ca <processThreeDigitNumber+0x156>
 31c:	06 c0       	rjmp	.+12     	; 0x32a <processThreeDigitNumber+0x1b6>
		number/=10;
	}
	
	//arr has the following contents: [digit 3, digit 2, digit 1]
	//if there are three digits then we can just send out the array
	if(compare == 3)
 31e:	e3 e0       	ldi	r30, 0x03	; 3
 320:	8e 16       	cp	r8, r30
 322:	91 04       	cpc	r9, r1
 324:	09 f0       	breq	.+2      	; 0x328 <processThreeDigitNumber+0x1b4>
 326:	93 cf       	rjmp	.-218    	; 0x24e <processThreeDigitNumber+0xda>
 328:	60 cf       	rjmp	.-320    	; 0x1ea <processThreeDigitNumber+0x76>
			_delay_us(SEGMENT_PAUSE);

		}
	}
	//turn off display
	PORTB = 0x00;
 32a:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
 32c:	1b b8       	out	0x0b, r1	; 11
}
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	fe be       	out	0x3e, r15	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	ed be       	out	0x3d, r14	; 61
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	bf 90       	pop	r11
 34a:	af 90       	pop	r10
 34c:	9f 90       	pop	r9
 34e:	8f 90       	pop	r8
 350:	08 95       	ret

00000352 <getReadings>:
		PORTB = 0x98;
}

//pulls POSITION_SAMPLES data points from the sensor, places values in an array 
int* getReadings()
{
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	c0 e0       	ldi	r28, 0x00	; 0
 35c:	d1 e0       	ldi	r29, 0x01	; 1
 35e:	04 e1       	ldi	r16, 0x14	; 20
 360:	11 e0       	ldi	r17, 0x01	; 1
	static int positions[POSITION_SAMPLES];	//array to hold the samples from the sensor, these values are in cm
	
	for(int i = 0; i < POSITION_SAMPLES; i++)
	{
		positions[i] = read_sonar();
 362:	0e 94 87 02 	call	0x50e	; 0x50e <read_sonar>
 366:	89 93       	st	Y+, r24
 368:	99 93       	st	Y+, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	82 e5       	ldi	r24, 0x52	; 82
 36e:	97 e0       	ldi	r25, 0x07	; 7
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <getReadings+0x1e>
 378:	00 c0       	rjmp	.+0      	; 0x37a <getReadings+0x28>
 37a:	00 00       	nop
//pulls POSITION_SAMPLES data points from the sensor, places values in an array 
int* getReadings()
{
	static int positions[POSITION_SAMPLES];	//array to hold the samples from the sensor, these values are in cm
	
	for(int i = 0; i < POSITION_SAMPLES; i++)
 37c:	c0 17       	cp	r28, r16
 37e:	d1 07       	cpc	r29, r17
 380:	81 f7       	brne	.-32     	; 0x362 <getReadings+0x10>
	{
		positions[i] = read_sonar();
		_delay_ms(READ_TIME/POSITION_SAMPLES);
	}
	return positions;
}
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <processSpeed>:

//calculates speeds from the distance readings using the centered difference method (dx/dt = (x_n+1 - x_n-1)/2*deltaT)
int processSpeed(int* positions)
{
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	60 97       	sbiw	r28, 0x10	; 16
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	9c 01       	movw	r18, r24
 3b6:	8e 01       	movw	r16, r28
 3b8:	0f 5f       	subi	r16, 0xFF	; 255
 3ba:	1f 4f       	sbci	r17, 0xFF	; 255
 3bc:	5c 01       	movw	r10, r24
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	a8 0e       	add	r10, r24
 3c2:	b1 1c       	adc	r11, r1
 3c4:	78 01       	movw	r14, r16
	int speeds[SPEED_SAMPLES];
	//calculate centered difference and put speed into an array
	for(int i = 0; i < SPEED_SAMPLES; i++)
		speeds[i] = abs((positions[i+2]-positions[i])/(2*(READ_TIME/POSITION_SAMPLES)/1000));
 3c6:	c1 2c       	mov	r12, r1
 3c8:	d1 2c       	mov	r13, r1
 3ca:	f9 01       	movw	r30, r18
 3cc:	84 81       	ldd	r24, Z+4	; 0x04
 3ce:	95 81       	ldd	r25, Z+5	; 0x05
 3d0:	2e 5f       	subi	r18, 0xFE	; 254
 3d2:	3f 4f       	sbci	r19, 0xFF	; 255
 3d4:	40 81       	ld	r20, Z
 3d6:	51 81       	ldd	r21, Z+1	; 0x01
 3d8:	84 1b       	sub	r24, r20
 3da:	95 0b       	sbc	r25, r21
 3dc:	b6 01       	movw	r22, r12
 3de:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divmodhi4>
 3e2:	cb 01       	movw	r24, r22
 3e4:	99 23       	and	r25, r25
 3e6:	24 f4       	brge	.+8      	; 0x3f0 <processSpeed+0x60>
 3e8:	88 27       	eor	r24, r24
 3ea:	99 27       	eor	r25, r25
 3ec:	86 1b       	sub	r24, r22
 3ee:	97 0b       	sbc	r25, r23
 3f0:	f7 01       	movw	r30, r14
 3f2:	81 93       	st	Z+, r24
 3f4:	91 93       	st	Z+, r25
 3f6:	7f 01       	movw	r14, r30
//calculates speeds from the distance readings using the centered difference method (dx/dt = (x_n+1 - x_n-1)/2*deltaT)
int processSpeed(int* positions)
{
	int speeds[SPEED_SAMPLES];
	//calculate centered difference and put speed into an array
	for(int i = 0; i < SPEED_SAMPLES; i++)
 3f8:	2a 15       	cp	r18, r10
 3fa:	3b 05       	cpc	r19, r11
 3fc:	31 f7       	brne	.-52     	; 0x3ca <processSpeed+0x3a>
 3fe:	ae 01       	movw	r20, r28
 400:	4f 5e       	subi	r20, 0xEF	; 239
 402:	5f 4f       	sbci	r21, 0xFF	; 255
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	90 e0       	ldi	r25, 0x00	; 0
		speeds[i] = abs((positions[i+2]-positions[i])/(2*(READ_TIME/POSITION_SAMPLES)/1000));

	//sum together the speeds
	int sum = 0;
	for(int i = 0; i < SPEED_SAMPLES; i++)
			sum += speeds[i];
 408:	f8 01       	movw	r30, r16
 40a:	21 91       	ld	r18, Z+
 40c:	31 91       	ld	r19, Z+
 40e:	8f 01       	movw	r16, r30
 410:	82 0f       	add	r24, r18
 412:	93 1f       	adc	r25, r19
	for(int i = 0; i < SPEED_SAMPLES; i++)
		speeds[i] = abs((positions[i+2]-positions[i])/(2*(READ_TIME/POSITION_SAMPLES)/1000));

	//sum together the speeds
	int sum = 0;
	for(int i = 0; i < SPEED_SAMPLES; i++)
 414:	e4 17       	cp	r30, r20
 416:	f5 07       	cpc	r31, r21
 418:	b9 f7       	brne	.-18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			sum += speeds[i];
			
	float avgSpeed = sum/(SPEED_SAMPLES);	//calculate average speed in cm/s
 41a:	bc 01       	movw	r22, r24
 41c:	99 23       	and	r25, r25
 41e:	14 f4       	brge	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	69 5f       	subi	r22, 0xF9	; 249
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	75 95       	asr	r23
 426:	67 95       	ror	r22
 428:	75 95       	asr	r23
 42a:	67 95       	ror	r22
 42c:	75 95       	asr	r23
 42e:	67 95       	ror	r22
 430:	07 2e       	mov	r0, r23
 432:	00 0c       	add	r0, r0
 434:	88 0b       	sbc	r24, r24
 436:	99 0b       	sbc	r25, r25
 438:	0e 94 57 03 	call	0x6ae	; 0x6ae <__floatsisf>
	avgSpeed = avgSpeed*0.02237;			//convert speed from cm/s to MPH
 43c:	2a e4       	ldi	r18, 0x4A	; 74
 43e:	31 e4       	ldi	r19, 0x41	; 65
 440:	47 eb       	ldi	r20, 0xB7	; 183
 442:	5c e3       	ldi	r21, 0x3C	; 60
 444:	0e 94 bb 03 	call	0x776	; 0x776 <__mulsf3>
	avgSpeed = avgSpeed*87;					//scale up from HO to real life
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	4e ea       	ldi	r20, 0xAE	; 174
 44e:	52 e4       	ldi	r21, 0x42	; 66
 450:	0e 94 bb 03 	call	0x776	; 0x776 <__mulsf3>
	return (int)avgSpeed;					
 454:	0e 94 1f 03 	call	0x63e	; 0x63e <__fixsfsi>
}
 458:	cb 01       	movw	r24, r22
 45a:	60 96       	adiw	r28, 0x10	; 16
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	df 90       	pop	r13
 474:	cf 90       	pop	r12
 476:	bf 90       	pop	r11
 478:	af 90       	pop	r10
 47a:	08 95       	ret

0000047c <main>:

int speeds[POSITION_SAMPLES - 2]; //array that holds the speed calculations, two less because of the difference method used

int main(void)
{
	SEVEN_SEG_DISPLAY_DDR = SEVEN_SEG_DATA_PINS; //PORTB as Output for 7-segment LEDs
 47c:	8f e7       	ldi	r24, 0x7F	; 127
 47e:	84 b9       	out	0x04, r24	; 4
	SEVEN_SEG_CONTROL_DDR = SEVEN_SEG_CONTROL_PINS; //PORTD as Output for control, PD0 is digit 1, PD1 is digit 2, PD2 is digit 3
 480:	87 e0       	ldi	r24, 0x07	; 7
 482:	8a b9       	out	0x0a, r24	; 10
	
	int speed = 0;
	int *positions;
	while(1) //infinite loop, take sensor readings, calculate average speed, display 3 digit number
	{
		 positions = getReadings();
 484:	0e 94 a9 01 	call	0x352	; 0x352 <getReadings>
		 speed = processSpeed(positions);
 488:	0e 94 c8 01 	call	0x390	; 0x390 <processSpeed>
		 if(speed > MINIMUM_DISPLAY_SPEED)
 48c:	8b 30       	cpi	r24, 0x0B	; 11
 48e:	91 05       	cpc	r25, r1
 490:	cc f3       	brlt	.-14     	; 0x484 <main+0x8>
			processThreeDigitNumber(speed);
 492:	0e 94 ba 00 	call	0x174	; 0x174 <processThreeDigitNumber>
 496:	f6 cf       	rjmp	.-20     	; 0x484 <main+0x8>

00000498 <init_sonar>:
 * Initiate Ultrasonic Module Ports and Pins
 * Input:   none
 * Returns: none
*********** ...- . . .-. --- -... --- - *********************************/
void init_sonar(){
    TRIG_OUTPUT_MODE();     // Set Trigger pin as output
 498:	53 9a       	sbi	0x0a, 3	; 10
    ECHO_INPUT_MODE();      // Set Echo pin as input
 49a:	54 98       	cbi	0x0a, 4	; 10
 49c:	08 95       	ret

0000049e <trigger_sonar>:
 * 3.   Clear trigger pin to pull it trigger pin low
 *  Input:   none
 *  Returns: none
********** ...- . . .-. --- -... --- - *********************************/
void trigger_sonar(){
    TRIG_LOW();             // Clear pin before setting it high
 49e:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	8a 95       	dec	r24
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <trigger_sonar+0x4>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <trigger_sonar+0xa>
    _delay_us(1);           // Clear to zero and give time for electronics to set
    TRIG_HIGH();            // Set pin high
 4a8:	5b 9a       	sbi	0x0b, 3	; 11
 4aa:	80 e2       	ldi	r24, 0x20	; 32
 4ac:	8a 95       	dec	r24
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <trigger_sonar+0xe>
    _delay_us(12);          // Send high pulse for minimum 10us
    TRIG_LOW();             // Clear pin
 4b0:	5b 98       	cbi	0x0b, 3	; 11
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	8a 95       	dec	r24
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <trigger_sonar+0x16>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <trigger_sonar+0x1c>
 4ba:	08 95       	ret

000004bc <__vector_13>:
/********** ...- . . .-. --- -... --- - *********************************
 * Increment timer on each overflow
 * Input:   none
 * Returns: none
********** ...- . . .-. --- -... --- - *********************************/
ISR(TIMER1_OVF_vect){   // Timer1 overflow interrupt
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
    overFlowCounter++;
 4ce:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <overFlowCounter>
 4d2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <overFlowCounter+0x1>
 4d6:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <overFlowCounter+0x2>
 4da:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <overFlowCounter+0x3>
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	a1 1d       	adc	r26, r1
 4e2:	b1 1d       	adc	r27, r1
 4e4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <overFlowCounter>
 4e8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <overFlowCounter+0x1>
 4ec:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <overFlowCounter+0x2>
 4f0:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <overFlowCounter+0x3>
    TCNT1=0;
 4f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 4f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 4fc:	bf 91       	pop	r27
 4fe:	af 91       	pop	r26
 500:	9f 91       	pop	r25
 502:	8f 91       	pop	r24
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <read_sonar>:
 * Input:   none
 * Returns: 1. -1       :   Indicates trigger error. Could not pull trigger high
 *          2. -2       :   Indicates echo error. No echo received within range
 *          3. Distance :   Sonar calculated distance in cm.
********** ...- . . .-. --- -... --- - *********************************/
unsigned int read_sonar(){
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
    int dist_in_cm = 0;
    init_sonar();                       // Setup pins and ports
 512:	0e 94 4c 02 	call	0x498	; 0x498 <init_sonar>
    trigger_sonar();                    // send a 10us high pulse
 516:	0e 94 4f 02 	call	0x49e	; 0x49e <trigger_sonar>
 
    while(!(ECHO_PIN & (1<<ECHO_BIT))){   // while echo pin is still low
 51a:	21 c0       	rjmp	.+66     	; 0x55e <read_sonar+0x50>
        trig_counter++;
 51c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <trig_counter>
 520:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <trig_counter+0x1>
 524:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <trig_counter+0x2>
 528:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <trig_counter+0x3>
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	a1 1d       	adc	r26, r1
 530:	b1 1d       	adc	r27, r1
 532:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <trig_counter>
 536:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <trig_counter+0x1>
 53a:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <trig_counter+0x2>
 53e:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <trig_counter+0x3>
         uint32_t max_response_time = SONAR_TIMEOUT;
        if (trig_counter > max_response_time){   // SONAR_TIMEOUT
 542:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <trig_counter>
 546:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <trig_counter+0x1>
 54a:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <trig_counter+0x2>
 54e:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <trig_counter+0x3>
 552:	85 31       	cpi	r24, 0x15	; 21
 554:	9f 48       	sbci	r25, 0x8F	; 143
 556:	a3 40       	sbci	r26, 0x03	; 3
 558:	b1 05       	cpc	r27, r1
 55a:	08 f0       	brcs	.+2      	; 0x55e <read_sonar+0x50>
 55c:	68 c0       	rjmp	.+208    	; 0x62e <read_sonar+0x120>
unsigned int read_sonar(){
    int dist_in_cm = 0;
    init_sonar();                       // Setup pins and ports
    trigger_sonar();                    // send a 10us high pulse
 
    while(!(ECHO_PIN & (1<<ECHO_BIT))){   // while echo pin is still low
 55e:	4c 9b       	sbis	0x09, 4	; 9
 560:	dd cf       	rjmp	.-70     	; 0x51c <read_sonar+0xe>
        if (trig_counter > max_response_time){   // SONAR_TIMEOUT
            return TRIG_ERROR;
        }
    }
 
    TCNT1=0;                            // reset timer
 562:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 566:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TCCR1B |= (1<<CS10);              // start 16 bit timer with no prescaler
 56a:	e1 e8       	ldi	r30, 0x81	; 129
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	81 60       	ori	r24, 0x01	; 1
 572:	80 83       	st	Z, r24
    TIMSK1 |= (1<<TOIE1);             // enable overflow interrupt on timer1
 574:	ef e6       	ldi	r30, 0x6F	; 111
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	81 60       	ori	r24, 0x01	; 1
 57c:	80 83       	st	Z, r24
    overFlowCounter=0;                  // reset overflow counter
 57e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <overFlowCounter>
 582:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <overFlowCounter+0x1>
 586:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <overFlowCounter+0x2>
 58a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <overFlowCounter+0x3>
    sei();                              // enable global interrupts
 58e:	78 94       	sei
 
    while((ECHO_PIN & (1<<ECHO_BIT))){    // while echo pin is still high
        if (((overFlowCounter*TIMER_MAX)+TCNT1) > SONAR_TIMEOUT){
 590:	e4 e8       	ldi	r30, 0x84	; 132
 592:	f0 e0       	ldi	r31, 0x00	; 0
    TCCR1B |= (1<<CS10);              // start 16 bit timer with no prescaler
    TIMSK1 |= (1<<TOIE1);             // enable overflow interrupt on timer1
    overFlowCounter=0;                  // reset overflow counter
    sei();                              // enable global interrupts
 
    while((ECHO_PIN & (1<<ECHO_BIT))){    // while echo pin is still high
 594:	19 c0       	rjmp	.+50     	; 0x5c8 <read_sonar+0xba>
        if (((overFlowCounter*TIMER_MAX)+TCNT1) > SONAR_TIMEOUT){
 596:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <overFlowCounter>
 59a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <overFlowCounter+0x1>
 59e:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <overFlowCounter+0x2>
 5a2:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <overFlowCounter+0x3>
 5a6:	c0 81       	ld	r28, Z
 5a8:	d1 81       	ldd	r29, Z+1	; 0x01
 5aa:	af ef       	ldi	r26, 0xFF	; 255
 5ac:	bf ef       	ldi	r27, 0xFF	; 255
 5ae:	0e 94 95 04 	call	0x92a	; 0x92a <__muluhisi3>
 5b2:	dc 01       	movw	r26, r24
 5b4:	cb 01       	movw	r24, r22
 5b6:	8c 0f       	add	r24, r28
 5b8:	9d 1f       	adc	r25, r29
 5ba:	a1 1d       	adc	r26, r1
 5bc:	b1 1d       	adc	r27, r1
 5be:	85 31       	cpi	r24, 0x15	; 21
 5c0:	9f 48       	sbci	r25, 0x8F	; 143
 5c2:	a3 40       	sbci	r26, 0x03	; 3
 5c4:	b1 05       	cpc	r27, r1
 5c6:	b0 f5       	brcc	.+108    	; 0x634 <read_sonar+0x126>
    TCCR1B |= (1<<CS10);              // start 16 bit timer with no prescaler
    TIMSK1 |= (1<<TOIE1);             // enable overflow interrupt on timer1
    overFlowCounter=0;                  // reset overflow counter
    sei();                              // enable global interrupts
 
    while((ECHO_PIN & (1<<ECHO_BIT))){    // while echo pin is still high
 5c8:	4c 99       	sbic	0x09, 4	; 9
 5ca:	e5 cf       	rjmp	.-54     	; 0x596 <read_sonar+0x88>
        if (((overFlowCounter*TIMER_MAX)+TCNT1) > SONAR_TIMEOUT){
            return ECHO_ERROR;          // No echo within sonar range
        }
    };
 
    TCCR1B = 0x00;                      // stop 16 bit timer with no prescaler
 5cc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    cli();                              // disable global interrupts
 5d0:	f8 94       	cli
    no_of_ticks = ((overFlowCounter*TIMER_MAX)+TCNT1);  // counter count
 5d2:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <overFlowCounter>
 5d6:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <overFlowCounter+0x1>
 5da:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <overFlowCounter+0x2>
 5de:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <overFlowCounter+0x3>
 5e2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 5e6:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 5ea:	af ef       	ldi	r26, 0xFF	; 255
 5ec:	bf ef       	ldi	r27, 0xFF	; 255
 5ee:	0e 94 95 04 	call	0x92a	; 0x92a <__muluhisi3>
 5f2:	dc 01       	movw	r26, r24
 5f4:	cb 01       	movw	r24, r22
 5f6:	8e 0f       	add	r24, r30
 5f8:	9f 1f       	adc	r25, r31
 5fa:	a1 1d       	adc	r26, r1
 5fc:	b1 1d       	adc	r27, r1
 5fe:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <no_of_ticks>
 602:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <no_of_ticks+0x1>
 606:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <no_of_ticks+0x2>
 60a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <no_of_ticks+0x3>
    dist_in_cm = (no_of_ticks/(CONVERT_TO_CM*CYCLES_PER_US));   // distance in cm
 60e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <no_of_ticks>
 612:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <no_of_ticks+0x1>
 616:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <no_of_ticks+0x2>
 61a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <no_of_ticks+0x3>
 61e:	20 ed       	ldi	r18, 0xD0	; 208
 620:	31 e0       	ldi	r19, 0x01	; 1
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__udivmodsi4>
    return (dist_in_cm );
 62a:	c9 01       	movw	r24, r18
 62c:	05 c0       	rjmp	.+10     	; 0x638 <read_sonar+0x12a>
 
    while(!(ECHO_PIN & (1<<ECHO_BIT))){   // while echo pin is still low
        trig_counter++;
         uint32_t max_response_time = SONAR_TIMEOUT;
        if (trig_counter > max_response_time){   // SONAR_TIMEOUT
            return TRIG_ERROR;
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	9f ef       	ldi	r25, 0xFF	; 255
 632:	02 c0       	rjmp	.+4      	; 0x638 <read_sonar+0x12a>
    overFlowCounter=0;                  // reset overflow counter
    sei();                              // enable global interrupts
 
    while((ECHO_PIN & (1<<ECHO_BIT))){    // while echo pin is still high
        if (((overFlowCounter*TIMER_MAX)+TCNT1) > SONAR_TIMEOUT){
            return ECHO_ERROR;          // No echo within sonar range
 634:	8e ef       	ldi	r24, 0xFE	; 254
 636:	9f ef       	ldi	r25, 0xFF	; 255
    TCCR1B = 0x00;                      // stop 16 bit timer with no prescaler
    cli();                              // disable global interrupts
    no_of_ticks = ((overFlowCounter*TIMER_MAX)+TCNT1);  // counter count
    dist_in_cm = (no_of_ticks/(CONVERT_TO_CM*CYCLES_PER_US));   // distance in cm
    return (dist_in_cm );
}
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	08 95       	ret

0000063e <__fixsfsi>:
 63e:	0e 94 26 03 	call	0x64c	; 0x64c <__fixunssfsi>
 642:	68 94       	set
 644:	b1 11       	cpse	r27, r1
 646:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_szero>
 64a:	08 95       	ret

0000064c <__fixunssfsi>:
 64c:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_splitA>
 650:	88 f0       	brcs	.+34     	; 0x674 <__fixunssfsi+0x28>
 652:	9f 57       	subi	r25, 0x7F	; 127
 654:	98 f0       	brcs	.+38     	; 0x67c <__fixunssfsi+0x30>
 656:	b9 2f       	mov	r27, r25
 658:	99 27       	eor	r25, r25
 65a:	b7 51       	subi	r27, 0x17	; 23
 65c:	b0 f0       	brcs	.+44     	; 0x68a <__fixunssfsi+0x3e>
 65e:	e1 f0       	breq	.+56     	; 0x698 <__fixunssfsi+0x4c>
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	1a f0       	brmi	.+6      	; 0x670 <__fixunssfsi+0x24>
 66a:	ba 95       	dec	r27
 66c:	c9 f7       	brne	.-14     	; 0x660 <__fixunssfsi+0x14>
 66e:	14 c0       	rjmp	.+40     	; 0x698 <__fixunssfsi+0x4c>
 670:	b1 30       	cpi	r27, 0x01	; 1
 672:	91 f0       	breq	.+36     	; 0x698 <__fixunssfsi+0x4c>
 674:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_zero>
 678:	b1 e0       	ldi	r27, 0x01	; 1
 67a:	08 95       	ret
 67c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_zero>
 680:	67 2f       	mov	r22, r23
 682:	78 2f       	mov	r23, r24
 684:	88 27       	eor	r24, r24
 686:	b8 5f       	subi	r27, 0xF8	; 248
 688:	39 f0       	breq	.+14     	; 0x698 <__fixunssfsi+0x4c>
 68a:	b9 3f       	cpi	r27, 0xF9	; 249
 68c:	cc f3       	brlt	.-14     	; 0x680 <__fixunssfsi+0x34>
 68e:	86 95       	lsr	r24
 690:	77 95       	ror	r23
 692:	67 95       	ror	r22
 694:	b3 95       	inc	r27
 696:	d9 f7       	brne	.-10     	; 0x68e <__fixunssfsi+0x42>
 698:	3e f4       	brtc	.+14     	; 0x6a8 <__fixunssfsi+0x5c>
 69a:	90 95       	com	r25
 69c:	80 95       	com	r24
 69e:	70 95       	com	r23
 6a0:	61 95       	neg	r22
 6a2:	7f 4f       	sbci	r23, 0xFF	; 255
 6a4:	8f 4f       	sbci	r24, 0xFF	; 255
 6a6:	9f 4f       	sbci	r25, 0xFF	; 255
 6a8:	08 95       	ret

000006aa <__floatunsisf>:
 6aa:	e8 94       	clt
 6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <__floatsisf+0x12>

000006ae <__floatsisf>:
 6ae:	97 fb       	bst	r25, 7
 6b0:	3e f4       	brtc	.+14     	; 0x6c0 <__floatsisf+0x12>
 6b2:	90 95       	com	r25
 6b4:	80 95       	com	r24
 6b6:	70 95       	com	r23
 6b8:	61 95       	neg	r22
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	99 23       	and	r25, r25
 6c2:	a9 f0       	breq	.+42     	; 0x6ee <__floatsisf+0x40>
 6c4:	f9 2f       	mov	r31, r25
 6c6:	96 e9       	ldi	r25, 0x96	; 150
 6c8:	bb 27       	eor	r27, r27
 6ca:	93 95       	inc	r25
 6cc:	f6 95       	lsr	r31
 6ce:	87 95       	ror	r24
 6d0:	77 95       	ror	r23
 6d2:	67 95       	ror	r22
 6d4:	b7 95       	ror	r27
 6d6:	f1 11       	cpse	r31, r1
 6d8:	f8 cf       	rjmp	.-16     	; 0x6ca <__floatsisf+0x1c>
 6da:	fa f4       	brpl	.+62     	; 0x71a <__floatsisf+0x6c>
 6dc:	bb 0f       	add	r27, r27
 6de:	11 f4       	brne	.+4      	; 0x6e4 <__floatsisf+0x36>
 6e0:	60 ff       	sbrs	r22, 0
 6e2:	1b c0       	rjmp	.+54     	; 0x71a <__floatsisf+0x6c>
 6e4:	6f 5f       	subi	r22, 0xFF	; 255
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	16 c0       	rjmp	.+44     	; 0x71a <__floatsisf+0x6c>
 6ee:	88 23       	and	r24, r24
 6f0:	11 f0       	breq	.+4      	; 0x6f6 <__floatsisf+0x48>
 6f2:	96 e9       	ldi	r25, 0x96	; 150
 6f4:	11 c0       	rjmp	.+34     	; 0x718 <__floatsisf+0x6a>
 6f6:	77 23       	and	r23, r23
 6f8:	21 f0       	breq	.+8      	; 0x702 <__floatsisf+0x54>
 6fa:	9e e8       	ldi	r25, 0x8E	; 142
 6fc:	87 2f       	mov	r24, r23
 6fe:	76 2f       	mov	r23, r22
 700:	05 c0       	rjmp	.+10     	; 0x70c <__floatsisf+0x5e>
 702:	66 23       	and	r22, r22
 704:	71 f0       	breq	.+28     	; 0x722 <__floatsisf+0x74>
 706:	96 e8       	ldi	r25, 0x86	; 134
 708:	86 2f       	mov	r24, r22
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	60 e0       	ldi	r22, 0x00	; 0
 70e:	2a f0       	brmi	.+10     	; 0x71a <__floatsisf+0x6c>
 710:	9a 95       	dec	r25
 712:	66 0f       	add	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	da f7       	brpl	.-10     	; 0x710 <__floatsisf+0x62>
 71a:	88 0f       	add	r24, r24
 71c:	96 95       	lsr	r25
 71e:	87 95       	ror	r24
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret

00000724 <__fp_split3>:
 724:	57 fd       	sbrc	r21, 7
 726:	90 58       	subi	r25, 0x80	; 128
 728:	44 0f       	add	r20, r20
 72a:	55 1f       	adc	r21, r21
 72c:	59 f0       	breq	.+22     	; 0x744 <__fp_splitA+0x10>
 72e:	5f 3f       	cpi	r21, 0xFF	; 255
 730:	71 f0       	breq	.+28     	; 0x74e <__fp_splitA+0x1a>
 732:	47 95       	ror	r20

00000734 <__fp_splitA>:
 734:	88 0f       	add	r24, r24
 736:	97 fb       	bst	r25, 7
 738:	99 1f       	adc	r25, r25
 73a:	61 f0       	breq	.+24     	; 0x754 <__fp_splitA+0x20>
 73c:	9f 3f       	cpi	r25, 0xFF	; 255
 73e:	79 f0       	breq	.+30     	; 0x75e <__fp_splitA+0x2a>
 740:	87 95       	ror	r24
 742:	08 95       	ret
 744:	12 16       	cp	r1, r18
 746:	13 06       	cpc	r1, r19
 748:	14 06       	cpc	r1, r20
 74a:	55 1f       	adc	r21, r21
 74c:	f2 cf       	rjmp	.-28     	; 0x732 <__fp_split3+0xe>
 74e:	46 95       	lsr	r20
 750:	f1 df       	rcall	.-30     	; 0x734 <__fp_splitA>
 752:	08 c0       	rjmp	.+16     	; 0x764 <__fp_splitA+0x30>
 754:	16 16       	cp	r1, r22
 756:	17 06       	cpc	r1, r23
 758:	18 06       	cpc	r1, r24
 75a:	99 1f       	adc	r25, r25
 75c:	f1 cf       	rjmp	.-30     	; 0x740 <__fp_splitA+0xc>
 75e:	86 95       	lsr	r24
 760:	71 05       	cpc	r23, r1
 762:	61 05       	cpc	r22, r1
 764:	08 94       	sec
 766:	08 95       	ret

00000768 <__fp_zero>:
 768:	e8 94       	clt

0000076a <__fp_szero>:
 76a:	bb 27       	eor	r27, r27
 76c:	66 27       	eor	r22, r22
 76e:	77 27       	eor	r23, r23
 770:	cb 01       	movw	r24, r22
 772:	97 f9       	bld	r25, 7
 774:	08 95       	ret

00000776 <__mulsf3>:
 776:	0e 94 ce 03 	call	0x79c	; 0x79c <__mulsf3x>
 77a:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_round>
 77e:	0e 94 31 04 	call	0x862	; 0x862 <__fp_pscA>
 782:	38 f0       	brcs	.+14     	; 0x792 <__mulsf3+0x1c>
 784:	0e 94 38 04 	call	0x870	; 0x870 <__fp_pscB>
 788:	20 f0       	brcs	.+8      	; 0x792 <__mulsf3+0x1c>
 78a:	95 23       	and	r25, r21
 78c:	11 f0       	breq	.+4      	; 0x792 <__mulsf3+0x1c>
 78e:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_inf>
 792:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_nan>
 796:	11 24       	eor	r1, r1
 798:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_szero>

0000079c <__mulsf3x>:
 79c:	0e 94 92 03 	call	0x724	; 0x724 <__fp_split3>
 7a0:	70 f3       	brcs	.-36     	; 0x77e <__mulsf3+0x8>

000007a2 <__mulsf3_pse>:
 7a2:	95 9f       	mul	r25, r21
 7a4:	c1 f3       	breq	.-16     	; 0x796 <__mulsf3+0x20>
 7a6:	95 0f       	add	r25, r21
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	55 1f       	adc	r21, r21
 7ac:	62 9f       	mul	r22, r18
 7ae:	f0 01       	movw	r30, r0
 7b0:	72 9f       	mul	r23, r18
 7b2:	bb 27       	eor	r27, r27
 7b4:	f0 0d       	add	r31, r0
 7b6:	b1 1d       	adc	r27, r1
 7b8:	63 9f       	mul	r22, r19
 7ba:	aa 27       	eor	r26, r26
 7bc:	f0 0d       	add	r31, r0
 7be:	b1 1d       	adc	r27, r1
 7c0:	aa 1f       	adc	r26, r26
 7c2:	64 9f       	mul	r22, r20
 7c4:	66 27       	eor	r22, r22
 7c6:	b0 0d       	add	r27, r0
 7c8:	a1 1d       	adc	r26, r1
 7ca:	66 1f       	adc	r22, r22
 7cc:	82 9f       	mul	r24, r18
 7ce:	22 27       	eor	r18, r18
 7d0:	b0 0d       	add	r27, r0
 7d2:	a1 1d       	adc	r26, r1
 7d4:	62 1f       	adc	r22, r18
 7d6:	73 9f       	mul	r23, r19
 7d8:	b0 0d       	add	r27, r0
 7da:	a1 1d       	adc	r26, r1
 7dc:	62 1f       	adc	r22, r18
 7de:	83 9f       	mul	r24, r19
 7e0:	a0 0d       	add	r26, r0
 7e2:	61 1d       	adc	r22, r1
 7e4:	22 1f       	adc	r18, r18
 7e6:	74 9f       	mul	r23, r20
 7e8:	33 27       	eor	r19, r19
 7ea:	a0 0d       	add	r26, r0
 7ec:	61 1d       	adc	r22, r1
 7ee:	23 1f       	adc	r18, r19
 7f0:	84 9f       	mul	r24, r20
 7f2:	60 0d       	add	r22, r0
 7f4:	21 1d       	adc	r18, r1
 7f6:	82 2f       	mov	r24, r18
 7f8:	76 2f       	mov	r23, r22
 7fa:	6a 2f       	mov	r22, r26
 7fc:	11 24       	eor	r1, r1
 7fe:	9f 57       	subi	r25, 0x7F	; 127
 800:	50 40       	sbci	r21, 0x00	; 0
 802:	9a f0       	brmi	.+38     	; 0x82a <__mulsf3_pse+0x88>
 804:	f1 f0       	breq	.+60     	; 0x842 <__mulsf3_pse+0xa0>
 806:	88 23       	and	r24, r24
 808:	4a f0       	brmi	.+18     	; 0x81c <__mulsf3_pse+0x7a>
 80a:	ee 0f       	add	r30, r30
 80c:	ff 1f       	adc	r31, r31
 80e:	bb 1f       	adc	r27, r27
 810:	66 1f       	adc	r22, r22
 812:	77 1f       	adc	r23, r23
 814:	88 1f       	adc	r24, r24
 816:	91 50       	subi	r25, 0x01	; 1
 818:	50 40       	sbci	r21, 0x00	; 0
 81a:	a9 f7       	brne	.-22     	; 0x806 <__mulsf3_pse+0x64>
 81c:	9e 3f       	cpi	r25, 0xFE	; 254
 81e:	51 05       	cpc	r21, r1
 820:	80 f0       	brcs	.+32     	; 0x842 <__mulsf3_pse+0xa0>
 822:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_inf>
 826:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_szero>
 82a:	5f 3f       	cpi	r21, 0xFF	; 255
 82c:	e4 f3       	brlt	.-8      	; 0x826 <__mulsf3_pse+0x84>
 82e:	98 3e       	cpi	r25, 0xE8	; 232
 830:	d4 f3       	brlt	.-12     	; 0x826 <__mulsf3_pse+0x84>
 832:	86 95       	lsr	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	b7 95       	ror	r27
 83a:	f7 95       	ror	r31
 83c:	e7 95       	ror	r30
 83e:	9f 5f       	subi	r25, 0xFF	; 255
 840:	c1 f7       	brne	.-16     	; 0x832 <__mulsf3_pse+0x90>
 842:	fe 2b       	or	r31, r30
 844:	88 0f       	add	r24, r24
 846:	91 1d       	adc	r25, r1
 848:	96 95       	lsr	r25
 84a:	87 95       	ror	r24
 84c:	97 f9       	bld	r25, 7
 84e:	08 95       	ret

00000850 <__fp_inf>:
 850:	97 f9       	bld	r25, 7
 852:	9f 67       	ori	r25, 0x7F	; 127
 854:	80 e8       	ldi	r24, 0x80	; 128
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	08 95       	ret

0000085c <__fp_nan>:
 85c:	9f ef       	ldi	r25, 0xFF	; 255
 85e:	80 ec       	ldi	r24, 0xC0	; 192
 860:	08 95       	ret

00000862 <__fp_pscA>:
 862:	00 24       	eor	r0, r0
 864:	0a 94       	dec	r0
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	18 06       	cpc	r1, r24
 86c:	09 06       	cpc	r0, r25
 86e:	08 95       	ret

00000870 <__fp_pscB>:
 870:	00 24       	eor	r0, r0
 872:	0a 94       	dec	r0
 874:	12 16       	cp	r1, r18
 876:	13 06       	cpc	r1, r19
 878:	14 06       	cpc	r1, r20
 87a:	05 06       	cpc	r0, r21
 87c:	08 95       	ret

0000087e <__fp_round>:
 87e:	09 2e       	mov	r0, r25
 880:	03 94       	inc	r0
 882:	00 0c       	add	r0, r0
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0xc>
 886:	88 23       	and	r24, r24
 888:	52 f0       	brmi	.+20     	; 0x89e <__fp_round+0x20>
 88a:	bb 0f       	add	r27, r27
 88c:	40 f4       	brcc	.+16     	; 0x89e <__fp_round+0x20>
 88e:	bf 2b       	or	r27, r31
 890:	11 f4       	brne	.+4      	; 0x896 <__fp_round+0x18>
 892:	60 ff       	sbrs	r22, 0
 894:	04 c0       	rjmp	.+8      	; 0x89e <__fp_round+0x20>
 896:	6f 5f       	subi	r22, 0xFF	; 255
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	8f 4f       	sbci	r24, 0xFF	; 255
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	08 95       	ret

000008a0 <__divmodhi4>:
 8a0:	97 fb       	bst	r25, 7
 8a2:	07 2e       	mov	r0, r23
 8a4:	16 f4       	brtc	.+4      	; 0x8aa <__divmodhi4+0xa>
 8a6:	00 94       	com	r0
 8a8:	07 d0       	rcall	.+14     	; 0x8b8 <__divmodhi4_neg1>
 8aa:	77 fd       	sbrc	r23, 7
 8ac:	09 d0       	rcall	.+18     	; 0x8c0 <__divmodhi4_neg2>
 8ae:	0e 94 a0 04 	call	0x940	; 0x940 <__udivmodhi4>
 8b2:	07 fc       	sbrc	r0, 7
 8b4:	05 d0       	rcall	.+10     	; 0x8c0 <__divmodhi4_neg2>
 8b6:	3e f4       	brtc	.+14     	; 0x8c6 <__divmodhi4_exit>

000008b8 <__divmodhi4_neg1>:
 8b8:	90 95       	com	r25
 8ba:	81 95       	neg	r24
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	08 95       	ret

000008c0 <__divmodhi4_neg2>:
 8c0:	70 95       	com	r23
 8c2:	61 95       	neg	r22
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255

000008c6 <__divmodhi4_exit>:
 8c6:	08 95       	ret

000008c8 <__udivmodsi4>:
 8c8:	a1 e2       	ldi	r26, 0x21	; 33
 8ca:	1a 2e       	mov	r1, r26
 8cc:	aa 1b       	sub	r26, r26
 8ce:	bb 1b       	sub	r27, r27
 8d0:	fd 01       	movw	r30, r26
 8d2:	0d c0       	rjmp	.+26     	; 0x8ee <__udivmodsi4_ep>

000008d4 <__udivmodsi4_loop>:
 8d4:	aa 1f       	adc	r26, r26
 8d6:	bb 1f       	adc	r27, r27
 8d8:	ee 1f       	adc	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	a2 17       	cp	r26, r18
 8de:	b3 07       	cpc	r27, r19
 8e0:	e4 07       	cpc	r30, r20
 8e2:	f5 07       	cpc	r31, r21
 8e4:	20 f0       	brcs	.+8      	; 0x8ee <__udivmodsi4_ep>
 8e6:	a2 1b       	sub	r26, r18
 8e8:	b3 0b       	sbc	r27, r19
 8ea:	e4 0b       	sbc	r30, r20
 8ec:	f5 0b       	sbc	r31, r21

000008ee <__udivmodsi4_ep>:
 8ee:	66 1f       	adc	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	1a 94       	dec	r1
 8f8:	69 f7       	brne	.-38     	; 0x8d4 <__udivmodsi4_loop>
 8fa:	60 95       	com	r22
 8fc:	70 95       	com	r23
 8fe:	80 95       	com	r24
 900:	90 95       	com	r25
 902:	9b 01       	movw	r18, r22
 904:	ac 01       	movw	r20, r24
 906:	bd 01       	movw	r22, r26
 908:	cf 01       	movw	r24, r30
 90a:	08 95       	ret

0000090c <__umulhisi3>:
 90c:	a2 9f       	mul	r26, r18
 90e:	b0 01       	movw	r22, r0
 910:	b3 9f       	mul	r27, r19
 912:	c0 01       	movw	r24, r0
 914:	a3 9f       	mul	r26, r19
 916:	70 0d       	add	r23, r0
 918:	81 1d       	adc	r24, r1
 91a:	11 24       	eor	r1, r1
 91c:	91 1d       	adc	r25, r1
 91e:	b2 9f       	mul	r27, r18
 920:	70 0d       	add	r23, r0
 922:	81 1d       	adc	r24, r1
 924:	11 24       	eor	r1, r1
 926:	91 1d       	adc	r25, r1
 928:	08 95       	ret

0000092a <__muluhisi3>:
 92a:	0e 94 86 04 	call	0x90c	; 0x90c <__umulhisi3>
 92e:	a5 9f       	mul	r26, r21
 930:	90 0d       	add	r25, r0
 932:	b4 9f       	mul	r27, r20
 934:	90 0d       	add	r25, r0
 936:	a4 9f       	mul	r26, r20
 938:	80 0d       	add	r24, r0
 93a:	91 1d       	adc	r25, r1
 93c:	11 24       	eor	r1, r1
 93e:	08 95       	ret

00000940 <__udivmodhi4>:
 940:	aa 1b       	sub	r26, r26
 942:	bb 1b       	sub	r27, r27
 944:	51 e1       	ldi	r21, 0x11	; 17
 946:	07 c0       	rjmp	.+14     	; 0x956 <__udivmodhi4_ep>

00000948 <__udivmodhi4_loop>:
 948:	aa 1f       	adc	r26, r26
 94a:	bb 1f       	adc	r27, r27
 94c:	a6 17       	cp	r26, r22
 94e:	b7 07       	cpc	r27, r23
 950:	10 f0       	brcs	.+4      	; 0x956 <__udivmodhi4_ep>
 952:	a6 1b       	sub	r26, r22
 954:	b7 0b       	sbc	r27, r23

00000956 <__udivmodhi4_ep>:
 956:	88 1f       	adc	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	5a 95       	dec	r21
 95c:	a9 f7       	brne	.-22     	; 0x948 <__udivmodhi4_loop>
 95e:	80 95       	com	r24
 960:	90 95       	com	r25
 962:	bc 01       	movw	r22, r24
 964:	cd 01       	movw	r24, r26
 966:	08 95       	ret

00000968 <_exit>:
 968:	f8 94       	cli

0000096a <__stop_program>:
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>
